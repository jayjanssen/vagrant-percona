# -*- mode: ruby -*-
# vi: set ft=ruby :

# Assumes a box from https://github.com/jayjanssen/packer-percona

require './lib/vagrant-common.rb'

# Define a set of parameters to pass into puppet for configuring the box.
puppet_config = {
	"innodb_buffer_pool_size"	=> "128M",
	"innodb_log_file_size"		=> "64M",
	"experimental_repo"		=> "no",
	"percona_server_version"	=> "55"
}

Vagrant.configure("2") do |config|
	# Every Vagrant virtual environment requires a box to build off of.
	config.vm.box = "perconajayj/centos-x86_64"
	config.ssh.username = "root"

	# If we use AWS, create a 'm1.small' and name it 
	provider_aws( config, "Percona Server", 'm1.small') { |aws, override|
		# Setup the ephemeral drive under sdb
		aws.block_device_mapping = [
			{
				'DeviceName' => "/dev/sdb",
				'VirtualName' => "ephemeral0"
			}
		]

		# Provision this node with puppet and the 'percona_server.pp' manifest.
		# - We use 'xvdb' instead of 'sdb' because of how /sys/block presents 
		# 	the device on EC2, but this is our ephemeral drive above.
		# - We override the buffer pool here because m1.small has 1.5G of RAM
		provision_puppet( override, 'percona_server.pp', puppet_config, { 
			'datadir_dev' => 'xvdb',
			'innodb_buffer_pool_size' => '1G'
		})
	}

	# If we use VirtualBox, configure 256M of RAM
	provider_virtualbox( config, '256' ) { |vb, override|		
		# Provision with puppet.  Use the dm-2 logical volume for mysql (this 
		# is built this way with the packer_percona boxes).
		provision_puppet( override, 'percona_server.pp', puppet_config, {
			'datadir_dev' => 'dm-2' 
		})
	}
end
